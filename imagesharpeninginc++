#include <fstream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <iostream>

using namespace std;

template <typename T>
T clamp(T value, T min, T max) {
    return (value < min) ? min : (value > max) ? max : value;
}

struct RGB {
    unsigned char r, g, b;
};

bool readPPM(const std::string& filename, std::vector<RGB>& pixels, int& width, int& height) {
    std::ifstream file(filename, std::ios::binary);
    if (!file) {
        std::cerr << "Error: Unable to open file " << filename << std::endl;
        return false;
    }

    std::string magic;
    int maxVal;
    file >> magic >> width >> height >> maxVal;
    file.ignore(256, '\n'); // Skip to end of line

    if (magic != "P6" || maxVal != 255) {
        std::cerr << "Error: Unsupported file format. Must be P6 PPM with maxVal 255." << std::endl;
        return false;
    }

    pixels.resize(width * height);
    file.read(reinterpret_cast<char*>(pixels.data()), width * height * 3);

    return file.good();
}

bool writePPM(const std::string& filename, const std::vector<RGB>& pixels, int width, int height) {
    std::ofstream file(filename, std::ios::binary);
    if (!file) {
        std::cerr << "Error: Unable to write file " << filename << std::endl;
        return false;
    }

    file << "P6\n" << width << " " << height << "\n255\n";
    file.write(reinterpret_cast<const char*>(pixels.data()), width * height * 3);

    return file.good();
}

void sharpen_image(std::vector<RGB>& input, std::vector<RGB>& output, int width, int height) {
    const float kernel[3][3] = {
        { 0, -1,  0},
        {-1,  5, -1},
        { 0, -1,  0}
    };

    for (int y = 0; y < height; ++y) {
        for (int x = 0; x < width; ++x) {
            int index = y * width + x;

            float r = 0.0f, g = 0.0f, b = 0.0f;

            for (int ky = -1; ky <= 1; ky++) {
                for (int kx = -1; kx <= 1; kx++) {
                    int px = clamp(x + kx, 0, width - 1);
                    int py = clamp(y + ky, 0, height - 1);
                    int pidx = py * width + px;

                    float weight = kernel[ky + 1][kx + 1];
                    RGB pixel = input[pidx];

                    r += pixel.r * weight;
                    g += pixel.g * weight;
                    b += pixel.b * weight;
                }
            }

            output[index] = RGB{
                static_cast<unsigned char>(clamp(r, 0.0f, 255.0f)),
                static_cast<unsigned char>(clamp(g, 0.0f, 255.0f)),
                static_cast<unsigned char>(clamp(b, 0.0f, 255.0f))
            };
        }
    }
}

int main() {
    const string input_file = "C:\\Users\\Shreyas\\Desktop\\img\\output.ppm";
    const string output_file = "C:\\Users\\Shreyas\\Desktop\\img\\output1.ppm";

    std::ifstream testFile(input_file, std::ios::binary);
    if (!testFile) {
        std::cerr << "Error: File not found at " << input_file << std::endl;
        return 1;
    }

    int width, height;
    std::vector<RGB> pixels;

    if (!readPPM(input_file, pixels, width, height)) {
        std::cerr << "Error: Could not read input image" << std::endl;
        return 1;
    }

    std::vector<RGB> output(pixels.size());

    sharpen_image(pixels, output, width, height);

    if (!writePPM(output_file, output, width, height)) {
        std::cerr << "Error: Could not write output image" << std::endl;
        return 1;
    }

    std::cout << "Sharpening complete. Saved to " << output_file << std::endl;
    return 0;
}
